const BASE_URL = 'http://localhost:3001/api/v1';

async function debugTokenAuthorization() {
  console.log('üîç Debuggeando token y autorizaci√≥n...\n');
  
  try {
    // 1. Obtener token
    console.log('1Ô∏è‚É£ Obteniendo token...');
    const loginData = {
      email: 'admin@cdelu.ar',
      password: 'admin123'
    };
    
    const loginResponse = await fetch(`${BASE_URL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(loginData)
    });
    
    if (!loginResponse.ok) {
      console.log('‚ùå Error en login:', loginResponse.status);
      return;
    }
    
    const loginResult = await loginResponse.json();
    const token = loginResult.token;
    
    console.log('‚úÖ Login exitoso');
    console.log('üë§ Usuario:', loginResult.user.nombre);
    console.log('üìß Email:', loginResult.user.email);
    console.log('üîë Rol:', loginResult.user.rol);
    console.log('üÜî ID:', loginResult.user.id);
    console.log('üîë Token:', token.substring(0, 50) + '...');
    
    // 2. Decodificar el token (JWT)
    console.log('\n2Ô∏è‚É£ Analizando token JWT...');
    try {
      const tokenParts = token.split('.');
      if (tokenParts.length === 3) {
        const payload = JSON.parse(atob(tokenParts[1]));
        console.log('üìã Payload del token:', payload);
        
        if (payload.rol) {
          console.log('üîë Rol en token:', payload.rol);
        } else {
          console.log('‚ö†Ô∏è No hay rol en el token');
        }
        
        if (payload.userId) {
          console.log('üÜî User ID en token:', payload.userId);
        }
        
        if (payload.exp) {
          const expDate = new Date(payload.exp * 1000);
          console.log('‚è∞ Token expira:', expDate);
          console.log('‚è∞ Es v√°lido:', expDate > new Date());
        }
      }
    } catch (error) {
      console.log('‚ùå Error decodificando token:', error.message);
    }
    
    // 3. Probar diferentes headers de autorizaci√≥n
    console.log('\n3Ô∏è‚É£ Probando diferentes formatos de autorizaci√≥n...');
    
    const authTests = [
      {
        name: 'Bearer token (est√°ndar)',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      },
      {
        name: 'Token sin Bearer',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': token
        }
      },
      {
        name: 'Token en header personalizado',
        headers: {
          'Content-Type': 'application/json',
          'X-Auth-Token': token
        }
      },
      {
        name: 'Token en query parameter',
        url: `${BASE_URL}/surveys?token=${token}`,
        headers: {
          'Content-Type': 'application/json'
        }
      }
    ];
    
    for (const test of authTests) {
      console.log(`\nüìù Probando: ${test.name}`);
      
      try {
        const response = await fetch(test.url || `${BASE_URL}/surveys`, {
          method: 'POST',
          headers: test.headers,
          body: JSON.stringify({
            title: 'Test de Autorizaci√≥n',
            question: '¬øFunciona la autorizaci√≥n?',
            options: ['S√≠', 'No']
          })
        });
        
        console.log('Status:', response.status);
        
        if (response.ok) {
          const result = await response.json();
          console.log('‚úÖ √âxito:', result);
        } else {
          const errorText = await response.text();
          console.log('‚ùå Error:', errorText);
        }
      } catch (error) {
        console.log('üí• Error de conexi√≥n:', error.message);
      }
    }
    
    // 4. Probar endpoint p√∫blico para comparar
    console.log('\n4Ô∏è‚É£ Probando endpoint p√∫blico...');
    
    try {
      const publicResponse = await fetch(`${BASE_URL}/surveys`);
      console.log('Status endpoint p√∫blico:', publicResponse.status);
      
      if (publicResponse.ok) {
        const publicResult = await publicResponse.json();
        console.log('‚úÖ Endpoint p√∫blico funciona');
      } else {
        const errorText = await publicResponse.text();
        console.log('‚ùå Error endpoint p√∫blico:', errorText);
      }
    } catch (error) {
      console.log('üí• Error endpoint p√∫blico:', error.message);
    }
    
  } catch (error) {
    console.error('üí• Error general:', error.message);
  }
}

// Funci√≥n principal
async function main() {
  console.log('üöÄ Debuggeando autorizaci√≥n...\n');
  
  await debugTokenAuthorization();
  
  console.log('\nüìã Posibles problemas:');
  console.log('   1. Token malformado');
  console.log('   2. Rol no incluido en el token');
  console.log('   3. Middleware de autorizaci√≥n defectuoso');
  console.log('   4. Configuraci√≥n incorrecta del backend');
  console.log('   5. Problema de CORS o headers');
}

main(); 