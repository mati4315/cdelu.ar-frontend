import axios from 'axios';

export interface VideoSettings {
  isVideoEnabled: boolean;
  lastModified: string;
  modifiedBy: string;
}

export interface VideoSettingsResponse {
  isVideoEnabled: boolean;
  lastModified: string;
  modifiedBy: string;
}

export interface UpdateVideoSettingsRequest {
  isVideoEnabled: boolean;
  modifiedBy: string;
}

export interface UpdateVideoSettingsResponse {
  success: boolean;
  settings: VideoSettings;
}

class VideoService {
  private readonly baseURL: string;

  constructor() {
    this.baseURL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3001/api/v1';
  }

  /**
   * Obtiene la configuraci√≥n actual del video (requiere permisos de admin)
   */
  async getVideoSettings(): Promise<VideoSettings> {
    console.log('üé• [VIDEO SERVICE] Obteniendo configuraci√≥n de video (admin)');
    
    try {
      const response = await axios.get<VideoSettingsResponse>(
        `${this.baseURL}/admin/video-settings`,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`,
            'Content-Type': 'application/json'
          }
        }
      );

      console.log('‚úÖ [VIDEO SERVICE] Configuraci√≥n obtenida:', response.data);
      return response.data;
      
    } catch (error: any) {
      console.error('‚ùå [VIDEO SERVICE] Error obteniendo configuraci√≥n:', error);
      
      // Si es error 401/403, es problema de autenticaci√≥n
      if (error.response?.status === 401 || error.response?.status === 403) {
        throw new Error('No tienes permisos para acceder a la configuraci√≥n de video');
      }
      
      // Si es error 404, puede ser que no exista configuraci√≥n (primera vez)
      if (error.response?.status === 404) {
        console.log('üìù [VIDEO SERVICE] No existe configuraci√≥n, usando valores por defecto');
        return {
          isVideoEnabled: true,
          lastModified: new Date().toISOString(),
          modifiedBy: 'Sistema'
        };
      }
      
      throw new Error(`Error al obtener configuraci√≥n de video: ${error.message}`);
    }
  }

  /**
   * Obtiene la configuraci√≥n p√∫blica del video (sin autenticaci√≥n)
   * Para que todos los usuarios puedan ver el estado global
   */
  async getPublicVideoSettings(): Promise<VideoSettings> {
    console.log('üé• [VIDEO SERVICE] Obteniendo configuraci√≥n p√∫blica de video');
    
    try {
      const response = await axios.get<VideoSettingsResponse>(
        `${this.baseURL}/video-settings/public`
      );

      console.log('‚úÖ [VIDEO SERVICE] Configuraci√≥n p√∫blica obtenida:', response.data);
      return response.data;
      
    } catch (error: any) {
      console.error('‚ùå [VIDEO SERVICE] Error obteniendo configuraci√≥n p√∫blica:', error);
      
      // Si es error 404, puede ser que no exista configuraci√≥n (primera vez)
      if (error.response?.status === 404) {
        console.log('üìù [VIDEO SERVICE] No existe configuraci√≥n p√∫blica, usando valores por defecto');
        return {
          isVideoEnabled: true,
          lastModified: new Date().toISOString(),
          modifiedBy: 'Sistema'
        };
      }
      
      throw new Error(`Error al obtener configuraci√≥n p√∫blica de video: ${error.message}`);
    }
  }

  /**
   * Actualiza la configuraci√≥n del video
   */
  async updateVideoSettings(settings: UpdateVideoSettingsRequest): Promise<VideoSettings> {
    console.log('üé• [VIDEO SERVICE] Actualizando configuraci√≥n:', settings);
    
    try {
      const response = await axios.put<UpdateVideoSettingsResponse>(
        `${this.baseURL}/admin/video-settings`,
        settings,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`,
            'Content-Type': 'application/json'
          }
        }
      );

      if (!response.data.success) {
        throw new Error('El servidor no pudo actualizar la configuraci√≥n');
      }

      console.log('‚úÖ [VIDEO SERVICE] Configuraci√≥n actualizada:', response.data.settings);
      return response.data.settings;
      
    } catch (error: any) {
      console.error('‚ùå [VIDEO SERVICE] Error actualizando configuraci√≥n:', error);
      
      // Si es error 401/403, es problema de autenticaci√≥n  
      if (error.response?.status === 401 || error.response?.status === 403) {
        throw new Error('No tienes permisos para modificar la configuraci√≥n de video');
      }
      
      // Si es error 422, validaci√≥n fallida
      if (error.response?.status === 422) {
        throw new Error('Datos inv√°lidos para actualizar la configuraci√≥n');
      }
      
      throw new Error(`Error al actualizar configuraci√≥n de video: ${error.message}`);
    }
  }

  /**
   * Verifica si el usuario tiene permisos de administrador
   */
  private hasAdminPermissions(): boolean {
    const token = localStorage.getItem('token');
    if (!token) return false;
    
    try {
      // Decodificar token JWT b√°sico (sin verificar firma por simplicidad)
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.rol === 'administrador' || payload.role === 'administrador';
    } catch {
      return false;
    }
  }

  /**
   * Valida que el usuario pueda usar este servicio
   */
  validateAdminAccess(): void {
    if (!this.hasAdminPermissions()) {
      throw new Error('Acceso denegado: se requieren permisos de administrador');
    }
  }
}

// Exportar instancia singleton
export const videoService = new VideoService();

// Exportar clase para testing
export { VideoService };
